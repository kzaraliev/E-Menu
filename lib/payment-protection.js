import { useState, useEffect } from 'react';
import { supabase } from './supabase';

// Hook for checking user subscription status
export function useSubscription(user) {
  const [hasActiveSubscription, setHasActiveSubscription] = useState(false);
  const [loading, setLoading] = useState(true);
  const [restaurantCount, setRestaurantCount] = useState(0);

  useEffect(() => {
    if (!user) {
      setHasActiveSubscription(false);
      setRestaurantCount(0);
      setLoading(false);
      return;
    }

    const checkSubscription = async () => {
      try {
        // Check if user has active subscription
        const { data: userData, error: userError } = await supabase
          .from('users')
          .select('plan_id')
          .eq('user_id', user.id)
          .single();

        if (userError) {
          console.error('Error checking subscription:', userError);
          setHasActiveSubscription(false);
        } else {
          setHasActiveSubscription(userData?.plan_id !== null);
        }

        // Get restaurant count
        const { data: restaurants, error: restaurantError } = await supabase
          .from('restaurants')
          .select('id')
          .eq('owner_id', user.id);

        if (restaurantError) {
          console.error('Error counting restaurants:', restaurantError);
          setRestaurantCount(0);
        } else {
          setRestaurantCount(restaurants?.length || 0);
        }

      } catch (error) {
        console.error('Error in checkSubscription:', error);
        setHasActiveSubscription(false);
        setRestaurantCount(0);
      } finally {
        setLoading(false);
      }
    };

    checkSubscription();
  }, [user]);

  return {
    hasActiveSubscription,
    restaurantCount,
    loading,
    canCreateRestaurant: hasActiveSubscription && restaurantCount === 0,
    hasReachedLimit: restaurantCount >= 1
  };
}

// Utility function to handle payment required scenarios
export function getPaymentRequiredMessage(hasActiveSubscription, restaurantCount) {
  if (!hasActiveSubscription) {
    return {
      title: 'üîí –ù–µ–æ–±—Ö–æ–¥–∏–º –µ –∞–∫—Ç–∏–≤–µ–Ω –ø–ª–∞–Ω',
      message: '–ó–∞ –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞, –º–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ –ø–ª–∞–Ω –∏ –∏–∑–≤—ä—Ä—à–µ—Ç–µ –ø–ª–∞—â–∞–Ω–µ.',
      action: '–ò–∑–±–µ—Ä–µ—Ç–µ –ø–ª–∞–Ω',
      actionLink: '/#pricing'
    };
  }

  if (restaurantCount >= 1) {
    return {
      title: 'üè™ –î–æ—Å—Ç–∏–≥–Ω–∞—Ç –ª–∏–º–∏—Ç –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏',
      message: '–ú–æ–∂–µ—Ç–µ –¥–∞ –∏–º–∞—Ç–µ —Å–∞–º–æ –µ–¥–∏–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç –Ω–∞ –ø—Ä–æ—Ñ–∏–ª. –ó–∞ –ø–æ–≤–µ—á–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏, –º–æ–ª—è —Å–≤—ä—Ä–∂–µ—Ç–µ —Å–µ —Å –Ω–∞—Å.',
      action: '–£–ø—Ä–∞–≤–ª—è–≤–∞–π—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∞',
      actionLink: '/dashboard/restaurants'
    };
  }

  return null;
} 